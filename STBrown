
// Soundtrack

// Initialise custom music

$("#music_player")[0].children[0].style.display="none"
$("#music_player")[0].children[1].style.display="none"

document.getElementById("modLoadReveal").style.display="none"
document.getElementById("modloaddiv").style.display="none"

musicBox = document.getElementById("music_player")
musicBox.style.display=""

var trackSel;
e = campaignTrail_temp
e.selectedSoundtrack = 0

toTime = (seconds) => {
  var date = new Date(null);
  date.setSeconds(seconds);
  return date.toISOString().substr(11, 8);
}

generateTime = () => {
    // Get the audio element
    var audio = document.getElementById("campaigntrailmusic");

    timeTracker = document.createElement("div");
    timeTracker.style = `
      text-align:left;
      border-style:solid;
      border-width:3px;
      height:150px;
      width:200px;
      background-color:#999999;
      float:right;
      padding: 10px;
    `
    $("#trackSelParent")[0].prepend(timeTracker);
    $("#trackSelParent")[0].prepend(document.createElement("br"));

    // Create a new element to display the current position of the audio
    var positionDisplay = document.createElement("gg");
    positionDisplay.id = "position-display";

    // Create a new slider element to change the time
    var timeSlider = document.createElement("input");
    timeSlider.type = "range";
    timeSlider.min = 0;
    timeSlider.max = 1;
    timeSlider.step = 0.001;
    timeSlider.value = 0;
    timeSlider.style.width = "200px";
    timeSlider.id = "time-slider";

    var pausePlay = document.createElement("button");
    pausePlay.id = "position-display";
    pausePlay.innerHTML = "<b>Pause</b>"
    pausePlay.style.width = "100%";


    pausePlay.addEventListener("click", event => {
      event.preventDefault();
      updatePositionDisplay();
      let audio = document.getElementById("campaigntrailmusic");
      if (audio.paused) {
        audio.play();
        event.target.innerHTML = "<b>Pause</b>";
        return;
      }
      audio.pause();
      event.target.innerHTML = "<b>Play</b>";
      return;
    })

    var volumeLabel = document.createElement("gg");
    volumeLabel.id = "volume-label";
    volumeLabel.innerHTML = "<br><b>Volume: </b>"

    var volumeSlider = document.createElement("input");
    volumeSlider.type = "range";
    volumeSlider.min = 0;
    volumeSlider.max = 1;
    volumeSlider.step = 0.001;
    volumeSlider.value = 0;
    volumeSlider.style.width = "200px";
    volumeSlider.id = "volume-slider";

    volumeSlider.value = audio.volume;

    timeTracker.appendChild(pausePlay);
    timeTracker.appendChild(document.createElement("br"));
    timeTracker.appendChild(document.createElement("br"));
    timeTracker.appendChild(positionDisplay);
    timeTracker.appendChild(timeSlider);
    timeTracker.appendChild(volumeLabel);
    timeTracker.appendChild(volumeSlider);

    updatePositionDisplay();

    //for (let i = 0; i < 10; i++)
    //timeTracker.append(document.createElement("br"));


    // Function to update the position display
    function updatePositionDisplay() {
      positionDisplay.innerHTML = "<b>Time:</b> " + toTime(audio.currentTime) + "<br>";
      timeSlider.value = audio.duration ? audio.currentTime / audio.duration : 0;
    }

    // Function to change the time of the audio
    function changeTime() {
      positionDisplay.innerHTML = "<b>Time:</b> " + toTime(audio.currentTime) + "<br>";
      audio.currentTime = timeSlider.value * audio.duration;
    }

    updateVolume = event => {
      audio.volume = event.target.value;
    }
    
    // Update the position display and slider every second
    setInterval(updatePositionDisplay, 1000);

    // Listen for changes to the time slider and change the time of the audio
    timeSlider.addEventListener("input", changeTime);
    volumeSlider.addEventListener("input", updateVolume)
}

function newMusicPlayer() {
  trackSel = document.createElement("div");
  trackSel.id = "trackSelParent"
  let z = `<br><br><br><br><br><br><br><br><br><br><div id='trackSel' style="text-align:left;border-style:solid;border-width:3px;overflow-y: scroll;overflow-x: hidden;height:200px; width:400px;background-color:#999999;float:right;">`
  z += `<b><select id='selectSoundtrack'><option value='`+soundtracks[e.selectedSoundtrack].name+`'>`+soundtracks[e.selectedSoundtrack].name+"</option>"
  for (i in soundtracks) {
    if (soundtracks[e.selectedSoundtrack] != soundtracks[i]) {
      z += `<option value='`+soundtracks[i].name+`'>`+soundtracks[i].name+`</option>`
    }
  }
  z += `</select></b><br><br>`
  // <label><input type="radio" name="option" value="option1">Option 1</label><br>
  for (i in soundtracks[e.selectedSoundtrack].tracklist) {
    let a = soundtracks[e.selectedSoundtrack].tracklist[i]
    let b = `<label><input class="trackSelector" type="radio" name="trackSelector" value="`+i+`">`+a.name+`</label><br>`
    z += b
  }
  z += "</div><br><br>"
  trackSel.innerHTML = z

  // select correct song

  musicBox.appendChild(trackSel);
  Array.from(document.getElementById("trackSel").children).filter(f=>{
    return f.tagName == "LABEL"
  }).map(f=>f.children[0])[0].checked = true

  // set soundtrack changer

  soundtrackSelector = document.getElementById("selectSoundtrack")
  soundtrackSelector.onchange = function() {
    for (i in soundtracks) {
      if (soundtracks[i].name == soundtrackSelector.value) {
        e.selectedSoundtrack = i
        break
      }
    }
    document.getElementById("trackSelParent").remove()
    newMusicPlayer()
  }

  var matches = document.querySelectorAll('.trackSelector');

  for (match in matches) {
    matches[match].onchange = function() {
      audio = $("#campaigntrailmusic")[0];
      audio.src = soundtracks[e.selectedSoundtrack].tracklist[this.value].url
      audio.currentTime = 0
    }
  }

  musicBox.children[2].loop = false
  musicBox.children[2].src = soundtracks[e.selectedSoundtrack].tracklist[0].url

  musicBox.children[2].onended = function() {
    console.log("next track")
    let selected = Number(document.querySelector('input[name="trackSelector"]:checked').value);
    let newSel = clamp(selected+1, soundtracks[e.selectedSoundtrack].tracklist.length-1, 0)
    let buttons = Array.from(document.getElementById("trackSel").children).filter(f=>{
      return f.tagName == "LABEL"
    }).map(f=>f.children[0])
    //let selectedIndex = buttons.map(f=>f.children[0]).map(f=>f.checked)
    buttons[newSel].click()
  }

  for (w = 0; w < 7; w++) {
    document.getElementById("trackSelParent").appendChild(document.createElement("br"))
  }
  
  generateTime();
}

clamp = function(a, max, min, overflow=true) {
  if (overflow) {
    return a > max ? min : a < min ? max : a;
  }
  return a > max ? max : a < min ? min : a;
}


// Track list

var soundtracks = {
  0: {
    name: "Moonbeam!",
    tracklist: [
      {
        "name": "Dead Kennedys - California Ãœber Alles",
        "url": "https://od.lk/s/MV8zMzYzNDM2MTVf/Dead%20Kennedy%27s%20-%20California%20%C3%9Cber%20Alles.mp3"
      },
      {
        "name": "Sonic Youth - 100%",
        "url": "https://od.lk/s/MV8zMzYzNDM0MDdf/Sonic%20Youth%20-%20100.mp3"
      },
     {
        "name": "Green Day - Welcome to Paradise",
        "url": "https://od.lk/s/MV8zMzYzNDM4OTBf/Green%20Day%20-%20Welcome%20to%20Paradise.mp3"
      },
      {
        "name": "Nirvana - In Bloom",
        "url": "https://od.lk/s/MV8zMzYzNDQyNjVf/Nirvana%20-%20In%20Bloom.mp3"
      },
      {
        "name": "My Bloody Valentine - Only Shallow",
        "url": "https://od.lk/s/MV8zMzYzNDQwNjFf/My%20Bloody%20Valentine%20-%20Only%20Shallow.mp3"
      },
      {
        "name": "Beastie Boys - Time For Livin'",
        "url": "https://od.lk/s/MV8zMzYzNDM0OTJf/Beastie%20Boys%20-%20Time%20For%20Livin%27.mp3"
      },
      {
        "name": "George H.W. Bush - Hard Times",
        "url": "https://od.lk/s/MV8zMzYzNDM3MzFf/George%20H.W.%20Bush%20-%20Hard%20Times.mp3"
  }
    ]
  },
  1: {
    name: "90sjig",
    tracklist: [
      {
        "name": "M.C. Hammer - U Can't Touch This",
        "url": "https://od.lk/s/OThfMzk2Nzg5ODdf/cant%20touch%20this.mp3"
      },
      {
        "name": "Spice Girls - Wannabe",
        "url": "https://od.lk/s/OThfMzk2Nzg5OTFf/wannabe.mp3"
      },
     {
        "name": "Coolio - Gangsta's Paradise",
        "url": "https://od.lk/s/OThfMzk2Nzg5OTBf/gangstah%20para.mp3"
      },
      {
        "name": "Nirvana - Smells Like Teen Spirit",
        "url": "https://od.lk/s/OThfMzk2Nzg5OTJf/smeells%20like%20spirit.mp3"
      },
      {
        "name": "Radiohead - Creep",
        "url": "https://od.lk/s/OThfMzk2Nzg5ODlf/creep.mp3"
      }
    ]
  }
}

// Set up new music player

newMusicPlayer()


function modifyForm() {
  try {
    const form = document.querySelector('form[name="game_type_selection"]');
    const select = form.querySelector('select[name="game_type_id"]');
  
    // change option value
    const option = select.querySelector('option[value="1"]');
    option.textContent = 'Default (Proportional)';

    // Remove second option
    select.querySelector('option[value="1"]').remove();
  
    // change h3 text
    const h3 = form.querySelector('h3');
    h3.textContent = 'How would you like the seats to be allocated?';
  } catch {}
}

//#endcode
